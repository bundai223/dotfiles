[[plugins]]
repo = 'andrewradev/switch.vim'

[[plugins]]
repo = 'bundai223/mysnip'

[[plugins]]
repo = 'bundai223/mysyntax.vim'

[[plugins]]
repo = 'bundai223/vim-template'

[[plugins]]
repo ='bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1

  let g:deoplete#enable_profile = 1
  " call deoplete#enable_logging('DEBUG', '~/deoplete.log')
'''
hook_post_source = '''
  let g:deoplete#sources#omni#input_patterns = {
  \   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
  \  'javascript': '[^. *\t]\.\w*',
  \  'typescript': '[^. *\t]\.\w*',
  \}
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " denite key bind
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    let b:dwn_disabled = 1
    let b:auto_cursorline_disabled = 1
    nnoremap <silent><buffer><expr> <BS>    denite#do_map('move_up_path')
    nnoremap <silent><buffer><expr> <C-a>   denite#do_map('do_action', 'my_file_rec')
    nnoremap <silent><buffer><expr> <C-g>   denite#do_map('do_action', 'grep')
    nnoremap <silent><buffer><expr> <C-n>   denite#do_map('do_action', 'dwm_new')
    nnoremap <silent><buffer><expr> <C-x>   denite#do_map('do_action', 'quick_move')
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select).'j'
    nnoremap <silent><buffer><expr> <Tab>   denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> a       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_setting()
  function! s:denite_filter_my_setting() abort
    let b:dwm_disabled = 1
    let b:auto_cursorline_disabled = 1
    inoremap <silent><buffer><expr> <BS>    denite#do_map('move_up_path')
    inoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    inoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
    " These mappings are not recommended in doc.
    inoremap <silent><buffer> <C-n>   <Esc><C-w>p:call cursor(line('.')+1,0)<CR><C-w>pA
    inoremap <silent><buffer> <C-p>   <Esc><C-w>p:call cursor(line('.')-1,0)<CR><C-w>pA
  endfunction

  if has('nvim')
    autocmd BufEnter \[denite\] call s:denite_change_cursorline()
    function! s:denite_change_cursorline() abort
      let output = execute('hi Cursorline')
      let guibg = matchstr(output, '\(guibg=\)\@<=#[a-zA-Z0-9]\+')
      hi CursorLine guibg=#183203
      execute 'autocmd BufLeave <buffer> hi Cursorline guibg=' . guibg
    endfunction
  endif

  " <Space>をdeniteのキーに
  nnoremap [denite] <Nop>
  nmap <C-u> [denite]

  " source
  " denite file
  nnoremap <silent> [denite]f   :<C-u>DeniteBufferDir file/rec<CR>
  nnoremap <silent> [denite]p   :<C-u>DeniteProjectDir file/rec<CR>
  nnoremap <silent> [denite]m   :<C-u>Denite file_mru<CR>
  nnoremap <silent> [denite]o   :<C-u>Denite -no-quit -wrap outline<CR>
  nnoremap <silent> [denite]gr   :<C-u>Denite -auto-preview grep<CR>
  nnoremap <silent> [denite]gh   :<C-u>Denite ghq<CR>
  nnoremap <silent> [denite]tw  :<C-u>Denite tweetvim<CR>
  nnoremap <silent> [denite]ns  :<C-u>Denite neosnippet<CR>
  nnoremap <silent> [denite]b   :<C-u>Denite buffer<CR>
  nnoremap <silent> [denite]cl   :<C-u>Denite -auto-preview colorscheme<CR>
  nnoremap <silent> [denite]cg   :<C-u>Denite cgrep<CR>

  " denite resume
  nnoremap <silent> [denite]r   :<C-u>Denite -resume<CR>
  nnoremap <silent> [denite]R   <Plug>(denite_restart)

  nnoremap <silent> [denite]<Space> :<C-u>Denite menu<CR>

  let g:neomru#time_format = "(%Y/%m/%d %H:%M:%S) "

  """""""""""""o
  call denite#custom#option('default', {
    \ 'split': 'floating',
    \ 'start_filter': v:true
    \ })
    "\ 'winheight': s:denite_winheight,
    "\ 'winrow': s:denite_winrow,
    "\ 'winwidth': s:denite_winwidth,

  " For ripgrep
  " Note: It is slower than ag
  call denite#custom#var('file/rec', 'command',
  \ ['rg', '--files', '--glob', '!.git'])

  " Change mappings.
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>')
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>')

  " Change matchers.
  call denite#custom#source(
  \ 'file_mru', 'matchers', ['matcher/regexp'])
  call denite#custom#source(
  \ 'file/rec', 'matchers', ['matcher/regexp'])

  " Change sorters.
  call denite#custom#source(
  \ 'file/rec', 'sorters', ['sorter/sublime'])

  " Ripgrep command on grep source
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'default_opts',
      \ ['--vimgrep', '--no-heading'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])

  " Add custom menus
  let s:menus = {}

  let s:menus.memo = {
    \ 'description': 'Edit your memo'
    \ }
  let s:menus.memo.file_candidates = [
    \ ['memo', g:memo_dir . '/changelog.memo'],
    \ ]

  let s:menus.git = {
    \ 'description': 'Edit your git config'
    \ }
  let s:menus.git.file_candidates = [
    \ ['gitconfig', '~/.gitconfig'],
    \ ['gitconfig shared',  g:pub_repos_path . '/dotfiles/config/.gitconfig' ],
    \ ['gitattributes',     g:pub_repos_path . '/dotfiles/config/git/.gitattributes_global' ],
    \ ['gitignore shared',  g:pub_repos_path . '/dotfiles/config/git/.gitignore_global' ],
    \ ['template',          g:pub_repos_path . '/dotfiles/config/git/templates' ],
    \ ]

  let s:menus.nvim = {
    \ 'description': 'Edit your import nvim configuration'
    \ }
  let s:menus.nvim.file_candidates = [
    \ ['init.vim',        '~/.config/nvim/init.vim'],
    \ ['init.vim shared', g:pub_repos_path . '/dotfiles/config/nvim/init.vim'],
    \ ['ginit.vim',       '~/.config/nvim/ginit.vim'],
    \ ['dein.toml',       g:dein_toml],
    \ ]

  let s:zsh_config_path = g:dotfiles_config_path . '/zsh'
  let s:menus.zsh = {
    \ 'description': 'Edit your import zsh configuration'
    \ }
  let s:menus.zsh.file_candidates = [
    \ ['zshrc',         '~/.zshrc'],
    \ ['zshrc shared',  g:dotfiles_config_path . '/.zshrc' ],
    \ ['zshrc osx',     s:zsh_config_path . '/.zshrc_osx' ],
    \ ['zshrc unix',    s:zsh_config_path . '/.zshrc_unix' ],
    \ ['zshrc wsl',     s:zsh_config_path . '/.zshrc_wsl' ],
    \ ['zshenv',        '~/.zshenv'],
    \ ['zshenv shared', g:dotfiles_config_path . '/.zshenv' ],
    \ ['zshenv osx',    s:zsh_config_path . '/.zshenv_osx' ],
    \ ['zshenv unix',   s:zsh_config_path . '/.zshenv_unix' ],
    \ ['zshenv wsl',    s:zsh_config_path . '/.zshenv_wsl' ],
    \ ['zsh plugins',   s:zsh_config_path . '/.zshrc.plugin'],
    \ ['zsh utils',     s:zsh_config_path . '/zsh-utils'],
    \ ]

  let s:menus.tmux = {
    \ 'description': 'Edit your import tmux configuration'
    \ }
  let s:menus.tmux.file_candidates = [
    \ ['tmux.conf',      g:pub_repos_path . '/dotfiles/config/.tmux.conf'],
    \ ['tmux.conf osx',  g:pub_repos_path . '/dotfiles/config/tmux/.tmux.conf_osx'],
    \ ['tmux.conf unix', g:pub_repos_path . '/dotfiles/config/tmux/.tmux.conf_unix'],
    \ ['tmux.conf wsl', g:pub_repos_path . '/dotfiles/config/tmux/.tmux.conf_wsl'],
    \ ]

  call denite#custom#var('menu', 'menus', s:menus)
'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
depends = 'denite.nvim'

[[plugins]]
repo = 'bundai223/vim-denite-shellcmd'
# repo = '~/repos/github.com/bundai223/vim-denite-shellcmd'
depends = 'denite.nvim'

[[plugins]]
repo = 'bundai223/vim-denite-cgrep'
# repo = '~/repos/github.com/bundai223/vim-denite-cgrep'
depends = 'denite.nvim'

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i = 1
hook_post_source = '''
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets' behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  "smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  " \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  " path to mysnippet
  let s:mysnip_path='~/repos/github.com/bundai223/mysnip'
  let g:neosnippet#snippets_directory=s:mysnip_path

  " Enable snipMate compatibility feature.
  " let g:neosnippet#enable_snipmate_compatibility = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1
depends = 'neosnippet.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  if !exists('g:context_filetype#filetypes')
    let g:context_filetype#filetypes = {}
  endif

  let g:context_filetype#filetypes.changelog = [
        \   {
        \    'start' : '^\s*```\s*\(\h\w*\)',
        \    'end' : '^\s*```$', 'filetype' : '\1',
        \   },
        \   {
        \    'start' : '^\s*- ```\s*\(\h\w*\)',
        \    'end' : '^\s*- ```$', 'filetype' : '\1',
        \   },
        \ ]
'''

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'

[[plugins]]
repo = 'vim-scripts/dbext.vim'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_cmd = ['OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch']
hook_add = '''
  let g:netrw_nogx = 1 " disable netrw's gx mapping.
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''


[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  " let g:submode_timeout = 0
  " TELLME: The above setting do not work.
  " Use the following instead of above.
  let g:submode_timeoutlen = 1000000

  let g:submode_keep_leaving_key=1

  " http://d.hatena.ne.jp/thinca/20130131/1359567419
  " https://gist.github.com/thinca/1518874
  " Window size mode.
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>+')
  call submode#map('winsize', 'n', '', '-', '<C-w>-')

  " Tab move mode.
  call submode#enter_with('tabmove', 'n', '', 'gt', 'gt')
  call submode#enter_with('tabmove', 'n', '', 'gT', 'gT')
  call submode#map('tabmove', 'n', '', 't', 'gt')
  call submode#map('tabmove', 'n', '', 'T', 'gT')
'''

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'

# [[plugins]]
# repo = 'kana/vim-textobj-function'
# depends = 'vim-textobj-user'
#
[[plugins]]
repo = 'kana/vim-textobj-lastpat'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  nmap [myleader]f <Plug>(clever-f-reset)
  let g:clever_f_use_migemo = 1
'''

[[plugins]]
repo = 'rhysd/migemo-search.vim'
hook_add = '''
  if executable('cmigemo')
    " cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>"
  endif
'''

[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
hook_add = '''
  vmap ab <Plug>(textobj-multiblock-a)
  vmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multitextobj'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  " バッファが空なら閉じる
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
        \   'runner' : 'vimproc',
        \   'runner/vimproc/updatetime' : 40,
        \   'outputter' : 'error',
        \   'outputter/error/success' : 'buffer',
        \   'outputter/error/error'  : 'quickfix',
        \   'outputter/buffer/split' : ':botright 8sp',
        \   'outputter/buffer/close_on_empty' : 1,
        \}
  let g:quickrun_config['rust'] = {
        \   'type' : 'rust/cargo',
        \}

  let g:quickrun_config['ruby.rspec'] = {
        \  'command' : 'rspec',
        \  'exec'    : 'bundle exec %c %o %s',
        \  'cmdopt'  : '-c -fd --tty',
        \  'filetype': 'rspec-result'
        \}
  let g:quickrun_config['ruby.rspec_line'] = {
        \  'command': 'rspec',
        \  'exec': 'bundle exec %c %s:%{line(".")} %o',
        \  'cmdopt': '-c -fd --tty',
        \  'filetype': 'rspec-result'
        \}

  augroup MyAutoCmd
    autocmd FileType ruby.rspec nnoremap <silent><buffer> <Leader>rl :<C-u>QuickRun ruby.rspec_line<CR>
  augroup END

'''

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_faster = 1
  let g:indentLine_color_term = 239
  let g:indentLine_color_gui = '#616161'
  let g:indentLine_concealcursor=""
  "let g:indentLine_char = '┊'
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let s:colorscheme = 'iceberg'
  if !empty($COLORSCHEME)
    let s:colorscheme = $COLORSCHEME
  endif

  let s:separator = { 'left': "\ue0b0", 'right': "\ue0b2" }
  let s:subseparator = { 'left': "\ue0b1", 'right': "\ue0b3" }
        "\ 'separator': { 'left': "|", 'right': "|" },
        "\ 'subseparator': { 'left': "|", 'right': "|" },
  let s:readonly = '⭤'
  let s:branch = '⭠ '

  let g:lightline = {
        \ 'colorscheme': s:colorscheme,
        \ 'separator': s:separator,
        \ 'subseparator': s:subseparator,
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [
        \     [ 'mode', 'plugin', 'paste' ],
        \     [ 'fugitive', 'filename' ],
        \     [ 'pwd' ]
        \   ],
        \   'right': [
        \     ['sky_color_clock'],
        \     ['lineinfo', 'syntax_check'],
        \     ['percent'],
        \     ['charcode', 'fileformat', 'fileencoding', 'filetype']
        \   ]
        \ },
        \ 'component_function': {
        \   'mode': 'MyMode',
        \   'plugin': 'MySpPlugin',
        \   'fugitive': 'MyFugitive',
        \   'gitgutter': 'MyGitgutter',
        \   'filename': 'MyFilename',
        \   'pwd': 'MyPwd',
        \   'charcode': 'MyCharCode',
        \   'fileformat': 'MyFileformat',
        \   'fileencoding': 'MyFileencoding',
        \   'filetype': 'MyFiletype'
        \ },
        \ 'component': {
        \   'sky_color_clock': "%#SkyColorClock#%{' ' . sky_color_clock#statusline() . ' '}%#SkyColorClockTemp# ",
        \ },
        \ 'component_expand': {
        \   'syntax_check': 'qfstatusline#Update',
        \ },
        \ 'component_type': {
        \   'syntax_check': 'error',
        \ },
        \}

  function! MyModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! MyReadonly()
    return &readonly ? s:readonly : ''
  endfunction

  function! MyFilename()
    let fname = expand('%:t')
    return
          \ fname =~ '__Gundo' ? '' :
          \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
          \  &ft == 'unite' ? unite#get_status_string() :
          \  &ft == 'vimshell' ? vimshell#get_status_string() :
          \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
          \ ('' != MyModified() ? ' ' . MyModified() : '') .
          \ '' != fname ? fname : '[No Name]')
  endfunction

  function! MyFugitive()
    try
      if expand('%:t') !~? 'Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
        let _ = fugitive#head()
        return strlen(_) ? s:branch._ : ''
      endif
    catch
    endtry
    return ''
  endfunction

  function! MyGitgutter()
    if ! exists('*GitGutterGetHunkSummary')
          \ || ! get(g:, 'gitgutter_enabled', 0)
          \ || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
          \ g:gitgutter_sign_added . ' ',
          \ g:gitgutter_sign_modified . ' ',
          \ g:gitgutter_sign_removed . ' '
          \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
  endfunction
  function! MyFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! MyFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! MyMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! MySpPlugin()
    let fname = expand('%:t')
    return  winwidth(0) <= 60 ? '' :
          \ fname == '__Gundo__' ? 'Gundo' :
          \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
          \ &ft == 'unite' ? 'Unite' :
          \ &ft == 'vimfiler' ? 'VimFiler' :
          \ &ft == 'vimshell' ? 'VimShell' :
          \ ''
  endfunction

  function! MyPwd()
    if winwidth(0) > 60
      " $HOMEは'~'表示の方が好きなので置き換え
      let s:homepath = expand('~')
      return substitute(getcwd(), expand('~'), '~', '')
    else
      return ''
    endif
  endfunction


  function! MyCharCode()
    if winwidth('.') <= 70
      return ''
    endif

    " Get the output of :ascii
    redir => ascii
    silent! ascii
    redir END

    if match(ascii, 'NUL') != -1
      return 'NUL'
    endif

    " Zero pad hex values
    let nrformat = '0x%02x'

    let encoding = (&fenc == '' ? &enc : &fenc)

    if encoding == 'utf-8'
      " Zero pad with 4 zeroes in unicode files
      let nrformat = '0x%04x'
    endif

    " Get the character and the numeric value from the return value of :ascii
    " This matches the two first pieces of the return value, e.g.
    " "<F>  70" => char: 'F', nr: '70'
    let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

    " Format the numeric value
    let nr = printf(nrformat, nr)

    return "'". char ."' ". nr
  endfunction
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_linters = {
        \   'sh': ['shellcheck'],
        \   'bash': ['shellcheck'],
        \   'ruby': ['rubocop'],
        \}
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '>'
  let g:ale_sign_warning = '>'

  let g:ale_lint_on_enter = 1
'''

[[plugins]]
repo = 'tyru/operator-camelize.vim'
hook_add = '''
  nmap <leader>s <plug>(operator-camelize-toggle)
  vmap <leader>s <plug>(operator-camelize-toggle)
'''

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'koron/codic-vim'
on_cmd = ['Codic']

[[plugins]]
repo ='tpope/vim-fugitive'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'


# rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
  let g:rustfmt_autosave = 1
'''


# go
[[plugins]]
repo    = 'zchee/deoplete-go'
depends = 'deoplete.nvim'
on_i    = 1
on_ft   = 'go'

[[plugins]]
repo  = 'fatih/vim-go'
on_ft = 'go'


[[plugins]]
repo    = 'zchee/deoplete-zsh'
depends = 'deoplete.nvim'
on_i    = 1
on_ft   = 'zsh'

[[plugins]]
repo    = 'Shougo/neco-vim'
depends = 'deoplete.nvim'
on_i    = 1
on_ft   = 'vim'

# ruby
[[plugins]]
repo  = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo  = 'tpope/vim-bundler'
on_ft = 'ruby'

[[plugins]]
repo  = 'tpope/vim-endwise'
on_ft = 'ruby'
on_i  = 1

[[plugins]]
repo  = 'yuku-t/vim-ref-ri'
on_ft = 'ruby'

[[plugins]]
repo    = 'osyo-manga/vim-monster'
depends = 'deoplete.nvim'
on_i    = 1
on_ft   = 'ruby'
hook_post_source = '''
  let g:monster#completion#solargraph#backend = "async_solargraph_suggest"
'''

[[plugins]]
repo    = 'todesking/ruby_hl_lvar.vim'
# on_ft   = 'ruby'
# hook_post_source = '''
#   silent! execute 'doautocmd FileType' &filetype
# '''

[[plugins]]
repo = 'pocke/dicts'

# python
[[plugins]]
repo    = 'zchee/deoplete-jedi'
depends = 'deoplete.nvim'
on_i    = 1
on_ft   = 'python'

# javascript
[[plugins]]
repo    = 'pangloss/vim-javascript'
on_ft   = 'js'


[[plugins]]
repo    = 'mxw/vim-jsx'
on_ft   = 'js'

[[plugins]]
repo    = 'posva/vim-vue'
on_ft   = 'vue'

[[plugins]]
repo    = 'leafgarland/typescript-vim'
on_ft   = 'typescript'

[[plugins]]
repo    = 'skywind3000/asyncrun.vim'
hook_add = '''
  autocmd BufWritePost *.js AsyncRun -post=checktime ./node_modules/.bin/eslint --fix %
'''

[[plugins]]
repo    = 'mattn/emmet-vim'
on_i    = 1
hook_post_source = '''
  let g:user_emmet_leader_key='<Tab>'
  let g:user_emmet_settings = {
    \  'javascript.jsx' : {
      \      'extends' : 'jsx',
      \  },
    \}
'''


[[plugins]]
repo = 'bundai223/vim-colors-solarized'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  colorscheme iceberg
'''

[[plugins]]
repo = 'mopp/sky-color-clock.vim'
hook_add = '''
  let g:sky_color_clock#enable_emoji_icon = 1
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
  " `eclipse.jdt.ls`で利用する、データ保存先ディレクトリの存在確認
  " ディレクトリが存在しない場合は作成する
  let l:jdt_lsp_data_dir = expand(g:outher_package_path) . "/jdt-data"
  if !isdirectory(l:jdt_lsp_data_dir)
    call mkdir(l:jdt_lsp_data_dir, "p")
  endif

  let g:LanguageClient_serverCommands = {
        \ 'ruby': ['solargraph', 'stdio'],
        \ 'rust': ['rustup', 'run', 'stable', 'rls'],
        \ 'go': ['~/go/bin/go-langserver'],
        \ 'vue': ['vls'],
        \ 'html': [],
        \ 'css': [],
        \ 'javascript.jsx': ['javascript-typescript-stdio'],
        \ 'javascript': ['javascript-typescript-stdio'],
        \ 'typescript': ['javascript-typescript-stdio'],
        \}

  let g:LanguageClient_serverCommands["java"] = [
        \ 'java',
        \ '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044',
        \ '-Declipse.application=org.eclipse.jdt.ls.core.id1',
        \ '-Dosgi.bundles.defaultStartLevel=4',
        \ '-Declipse.product=org.eclipse.jdt.ls.core.product',
        \ '-Dlog.protocol=true',
        \ '-Dlog.level=ALL',
        \ '-noverify',
        \ '-Xmx1G',
        \ '-jar',
        \ expand(g:outher_package_path) . '/jdt-lsp/plugins/org.eclipse.equinox.launcher_1.5.200.v20180922-1751.jar',
        \ '-configuration',
        \ expand(g:outher_package_path) . '/jdt-lsp/config_mac',
        \ '-data',
        \ l:jdt_lsp_data_dir]

  nnoremap <silent> [myleader]lh :call LanguageClient#textDocument_hover()<CR>
  nnoremap <silent> [myleader]ld :call LanguageClient#textDocument_definition()<CR>
  nnoremap <silent> [myleader]lr :call LanguageClient#textDocument_rename()<CR>
  nnoremap <silent> [myleader]lf :call LanguageClient#textDocument_formatting()<CR>
  nnoremap <silent> [myleader]lc :call LanguageClient_contextMenu()<CR>
'''
hook_post_update = '''
  " g:outher_package_pathは、`eclipse.jdt.ls`などの外部ツールのインストール先ディレクトリ。
  " 省略しているが、`init.vim`で設定している。
  let l:jdt_lsp_path = expand(g:outher_package_path) . "/jdt-lsp"
  " 指定のディレクトリに`eclipse.jdt.ls`が存在するか確認
  if !executable(l:jdt_lsp_path . "/plugins/org.eclipse.equinox.launcher_1.5.200.v20180922-1751.jar")
    " `eclipse.jdt.ls`のダウンロード
    !curl -o /tmp/tmp_jdt_lsp.tar.gz http://download.eclipse.org/jdtls/snapshots/jdt-language-server-0.27.0-201810230512.tar.gz
    " `eclipse.jdt.ls`の保存先ディレクトリを作成
    call mkdir(l:jdt_lsp_path, "p")
    " ダウンロードしてきたファイルを保存先ディレクトリに解凍
    execute "!tar xf /tmp/tmp_jdt_lsp.tar.gz -C " . l:jdt_lsp_path
    " tar.gzファイルを削除
    !rm /tmp/tmp_jdt_lsp.tar.gz
  endif
'''

[[plugins]]
repo = 'cocopon/vaffle.vim'

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = 'pug'

[[plugins]]
repo = 'airblade/vim-rooter'

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_source = '''
  let g:gen_tags#ctags_auto_gen = 1
  let g:gen_tags#gtags_auto_gen = 1
'''

[[plugins]]
repo = 'lighttiger2505/gtags.vim'
hook_source = '''
  nnoremap <silent> [myleader]gf :Gtags -f %<CR>
  nnoremap <silent> [myleader]gj :GtagsCursor<CR>
  nnoremap <silent> [myleader]gd :<C-u>exe('Gtags '.expand('<cword>'))<CR>
  nnoremap <silent> [myleader]gr :<C-u>exe('Gtags -r '.expand('<cword>'))<CR>
'''

[[plugins]]
repo = 'AndrewRadev/gapply.vim'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'wakatime/vim-wakatime'
