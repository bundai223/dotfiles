# `g:context_filetype#search_offset`によって200行までしかhighlightされないので注意

[[plugins]]
repo = 'liuchengxu/vim-which-key'
hook_source = '''
  nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
  set timeoutlen=300

  let g:which_key_map = get(g:, 'which_key_map', {})
  " let g:which_key_map.q = {
  "       \ 'name': '+quickfix',
  "       \ 'o': ['copen', 'open-quickfix']
  "       \ }
  let g:which_key_map['f'] = {
        \ 'name': '+files',
        \ 'e': {
        \   'name': '+edit',
        \   'g': { 'name': '+git config' },
        \   'm': { 'name': '+memo' },
        \   't': { 'name': '+tmux' },
        \   'v': { 'name': '+neovim config' },
        \   'z': { 'name': '+zsh config' },
        \ }
        \ }
  let g:which_key_map['/'] = {
        \ 'name': ':+search',
        \ }
  " call which_key#register('<Space>', "g:which_key_map")
  " let g:which_key_vertical = 1 # floating
'''

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste' # paste時に:set pasteしてくれるやつ

[[plugins]]
repo = 'andrewradev/switch.vim'

[[plugins]]
repo = 'bundai223/mysnip'

[[plugins]]
repo = 'bundai223/mysyntax.vim'

[[plugins]]
repo = 'bundai223/vim-template'

[[plugins]]
repo ='bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'liuchengxu/vim-clap'
build = 'make'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# on_i = 1
# hook_source = '''
#   call deoplete#custom#option({
#        \ 'auto_complete_delay': 0,
#        \ 'enable_refresh_always': 0,
#        \ 'deoplete#enable_smart_case': 1,
#        \ 'max_list': 1000,
#        \ })
#   let g:deoplete#enable_at_startup = 1
#   let g:deoplete#auto_start_length = 0
#   let g:deoplete#enable_camel_case = 0
#   let g:deoplete#enable_ignore_case = 0
# 
#   call deoplete#custom#var('file', {
#        \ 'enable_buffer_path': v:true,
#        \ })
# 
#   " let g:deoplete#enable_profile = 1
#   " call deoplete#enable_logging('DEBUG', expand('~/deoplete.log'))
# '''
# hook_post_source = '''
#   let g:deoplete#sources#omni#input_patterns = {
#  \   'ruby': ['[^. *\t]\.\w*', '[a-zA-Z_]\w*::'],
#  \   'javascript': '[^. *\t]\.\w*',
#  \   'typescript': '[^. *\t]\.\w*',
#  \}
# '''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " denite key bind
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    let b:dwn_disabled = 1
    let b:auto_cursorline_disabled = 1
    " nnoremap <silent><buffer><expr> <BS>    denite#do_map('move_up_path')
    " inoremap <silent><buffer><expr> <C-w>   denite#do_map('move_up_path')
    nnoremap <silent><buffer><expr> <C-a>   denite#do_map('do_action', 'my_file_rec')
    nnoremap <silent><buffer><expr> <C-g>   denite#do_map('do_action', 'grep')
    nnoremap <silent><buffer><expr> <C-n>   denite#do_map('do_action', 'dwm_new')
    nnoremap <silent><buffer><expr> <C-x>   denite#do_map('do_action', 'quick_move')
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select).'j'
    nnoremap <silent><buffer><expr> <Tab>   denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> a       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
    nnoremap <silent><buffer><expr> <Esc>   denite#do_map('quit')
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_setting()
  function! s:denite_filter_my_setting() abort
    let b:dwm_disabled = 1
    let b:auto_cursorline_disabled = 1
    " inoremap <silent><buffer><expr> <C-w>   denite#do_map('move_up_path')
    inoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    inoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
    " filter bufferでescしたらdenite bufferに移動する
    inoremap <silent><buffer>       <Esc>   <Esc><C-w>p
    " These mappings are not recommended in doc.
    inoremap <silent><buffer> <C-n>   <Esc><C-w>p:call cursor(line('.')+1,0)<CR><C-w>pA
    inoremap <silent><buffer> <C-p>   <Esc><C-w>p:call cursor(line('.')-1,0)<CR><C-w>pA
  endfunction

  if has('nvim')
    autocmd BufEnter \[denite\] call s:denite_change_cursorline()
    function! s:denite_change_cursorline() abort
      let output = execute('hi Cursorline')
      let guibg = matchstr(output, '\(guibg=\)\@<=#[a-zA-Z0-9]\+')
      hi CursorLine guibg=#183203
      execute 'autocmd BufLeave <buffer> hi Cursorline guibg=' . guibg
    endfunction
  endif

 "  " disable deoplete completion on denite filter buffer
	" autocmd FileType denite-filter call s:denite_filter_my_settings()
	" function! s:denite_filter_my_settings() abort
	"   call deoplete#custom#buffer_option('auto_complete', v:false)
	" endfunction

  " source
  " vim-which-key対応に伴い統一テスト
  nnoremap <silent> <leader>/f   :<C-u>DeniteBufferDir file/rec<CR>
  nnoremap <silent> <leader>/p   :<C-u>Denite file/rec/git<CR>
  nnoremap <silent> <leader>/m   :<C-u>Denite file_mru<CR>
  nnoremap <silent> <leader>/o   :<C-u>Denite -no-quit -wrap outline<CR>
  nnoremap <silent> <leader>/gr   :<C-u>Denite -auto-action=preview grep<CR>
  nnoremap <silent> <leader>/gh   :<C-u>Denite ghq<CR>
  nnoremap <silent> <leader>/tw  :<C-u>Denite tweetvim<CR>
  nnoremap <silent> <leader>/ns  :<C-u>Denite neosnippet<CR>
  nnoremap <silent> <leader>/b   :<C-u>Denite buffer<CR>
  nnoremap <silent> <leader>/cl   :<C-u>Denite -auto-action=preview colorscheme<CR>
  nnoremap <silent> <leader>/cg   :<C-u>Denite cgrep<CR>
  nnoremap <silent> <leader>/r   :<C-u>Denite -resume<CR>
  nnoremap <silent> <leader>/<Space> :<C-u>Denite menu<CR>
  nmap <silent> <leader>/R   <Plug>(denite_restart)

  " <Space>をdeniteのキーに
  nnoremap [denite] <Nop>
  nmap <C-u> [denite]

  " denite file
  nnoremap <silent> [denite]f   :<C-u>DeniteBufferDir file/rec<CR>
  nnoremap <silent> [denite]p   :<C-u>Denite file/rec/git<CR>
  nnoremap <silent> [denite]m   :<C-u>Denite file_mru<CR>
  nnoremap <silent> [denite]o   :<C-u>Denite -no-quit -wrap outline<CR>
  nnoremap <silent> [denite]gr   :<C-u>Denite -auto-action=preview grep<CR>
  nnoremap <silent> [denite]gh   :<C-u>Denite ghq<CR>
  nnoremap <silent> [denite]tw  :<C-u>Denite tweetvim<CR>
  nnoremap <silent> [denite]ns  :<C-u>Denite neosnippet<CR>
  nnoremap <silent> [denite]b   :<C-u>Denite buffer<CR>
  nnoremap <silent> [denite]cl   :<C-u>Denite -auto-action=preview colorscheme<CR>
  nnoremap <silent> [denite]cg   :<C-u>Denite cgrep<CR>

  " max candidate
	call denite#custom#option('_',
	\ 'max_dynamic_update_candidates', 100000)

  " denite resume
  nnoremap <silent> [denite]r   :<C-u>Denite -resume<CR>
  nmap <silent> [denite]R   <Plug>(denite_restart)

  nnoremap <silent> [denite]<Space> :<C-u>Denite menu<CR>

  let g:neomru#time_format = "(%Y/%m/%d %H:%M:%S) "

  """""""""""""o
  call denite#custom#option('default', {
    \ 'split': 'floating',
    \ 'start_filter': v:true
    \ })
    "\ 'winheight': s:denite_winheight,
    "\ 'winrow': s:denite_winrow,
    "\ 'winwidth': s:denite_winwidth,

  " Change mappings.
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>')
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>')

  " filter
  let s:clap = g:plugin_dir . '/repos/github.com/liuchengxu/vim-clap'
  call denite#custom#filter('matcher/clap', 'clap_path', expand(s:clap))

  " file/rec
  " call denite#custom#source('file_mru', 'matchers', ['matcher/regexp'])
  " call denite#custom#source('file_mru', 'matchers', ['matcher/clap'])
  call denite#custom#source('file_mru', 'matchers', ['converter/prioritize_basename', 'matcher/clap'])
  call denite#custom#source('file/rec', 'matchers', ['converter/prioritize_basename', 'matcher/clap'])
  call denite#custom#source('file/rec/git', 'matchers', ['converter/prioritize_basename', 'matcher/clap'])

	" Ripgrep command on grep source
	call denite#custom#var('grep', {
		\ 'command': ['rg'],
		\ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
		\ 'recursive_opts': [],
		\ 'pattern_opt': ['--regexp'],
		\ 'separator': ['--'],
		\ 'final_opts': [],
		\ })

  " project file
	call denite#custom#alias('source', 'file/rec/git', 'file/rec')
	call denite#custom#var('file/rec/git', 'command',
        \ ['git', 'ls-files', '-co', '--exclude-standard'])

	" call denite#custom#var('file/rec',
  "       \ 'command', ['rg', '--files', '--glob', "'!.git'", '--color', 'never'])

  " Add custom menus
  let s:menus = {}

  let s:menus.memo = {
    \ 'description': 'Edit your memo'
    \ }
  let s:menus.memo.file_candidates = [
    \ ['memo', g:memo_dir . '/ChangeLog'],
    \ ]

  let s:menus.git = {
    \ 'description': 'Edit your git config'
    \ }
  let s:menus.git.file_candidates = [
    \ ['gitconfig shared',  g:pub_repos_path . '/dotfiles/config/.gitconfig' ],
    \ ['gitignore shared',  g:pub_repos_path . '/dotfiles/config/git/.gitignore_global' ],
    \ ['gitconfig', '~/.gitconfig'],
    \ ['gitattributes',     g:pub_repos_path . '/dotfiles/config/git/.gitattributes_global' ],
    \ ['template',          g:pub_repos_path . '/dotfiles/config/git/templates' ],
    \ ]

  let s:menus.nvim = {
    \ 'description': 'Edit your import nvim configuration'
    \ }
  let s:menus.nvim.file_candidates = [
    \ ['init.vim shared', g:pub_repos_path . '/dotfiles/config/nvim/init.vim'],
    \ ['init.vim',        '~/.config/nvim/init.vim'],
    \ ['ginit.vim',       '~/.config/nvim/ginit.vim'],
    \ ['dein.toml',       g:dein_toml],
    \ ['snippets',        g:pub_repos_path . '/mysnip'],
    \ ]

  let s:zsh_config_path = g:dotfiles_config_path . '/zsh'
  let s:menus.zsh = {
    \ 'description': 'Edit your import zsh configuration'
    \ }
  let s:menus.zsh.file_candidates = [
    \ ['zshrc shared',  g:dotfiles_config_path . '/.zshrc' ],
    \ ['zshrc',         '~/.zshrc'],
    \ ['zshrc osx',     s:zsh_config_path . '/.zshrc_osx' ],
    \ ['zshrc unix',    s:zsh_config_path . '/.zshrc_unix' ],
    \ ['zshrc wsl',     s:zsh_config_path . '/.zshrc_wsl' ],
    \ ['zshenv shared', g:dotfiles_config_path . '/.zshenv' ],
    \ ['zshenv',        '~/.zshenv'],
    \ ['zshenv osx',    s:zsh_config_path . '/.zshenv_osx' ],
    \ ['zshenv unix',   s:zsh_config_path . '/.zshenv_unix' ],
    \ ['zshenv wsl',    s:zsh_config_path . '/.zshenv_wsl' ],
    \ ['zsh plugins',   s:zsh_config_path . '/.zshrc.plugin'],
    \ ['zsh utils',     s:zsh_config_path . '/zsh-utils'],
    \ ]

  let s:menus.tmux = {
    \ 'description': 'Edit your import tmux configuration'
    \ }
  let s:menus.tmux.file_candidates = [
    \ ['tmux.conf',      g:pub_repos_path . '/dotfiles/config/.tmux.conf'],
    \ ['tmux.conf osx',  g:pub_repos_path . '/dotfiles/config/tmux/.tmux.conf_osx'],
    \ ['tmux.conf unix', g:pub_repos_path . '/dotfiles/config/tmux/.tmux.conf_unix'],
    \ ['tmux.conf wsl', g:pub_repos_path . '/dotfiles/config/tmux/.tmux.conf_wsl'],
    \ ]

  let s:menus.powerline = {
    \ 'description': 'Edit your import powerline configuration'
    \ }
  let s:menus.powerline.file_candidates = [
    \ ['powerline config', g:pub_repos_path . '/dotfiles/config/.config/powerline/config.json'],
    \ ['powerline colors', g:pub_repos_path . '/dotfiles/config/.config/powerline/colors.json'],
    \ ['themes',           g:pub_repos_path . '/dotfiles/config/.config/powerline/themes'],
    \ ['tmux themes',      g:pub_repos_path . '/dotfiles/config/.config/powerline/themes/tmux'],
    \ ]

  call denite#custom#var('menu', 'menus', s:menus)

  " vim-which-key対応に伴い統一テスト
  let s:zsh_config_path = g:dotfiles_config_path . '/zsh'
  nnoremap <silent> <leader>fem  :execute ":e " . g:memo_dir . "/ChangeLog"<CR>
  nnoremap <silent> <leader>fegsc :execute ":e " . g:pub_repos_path . "/dotfiles/config/.gitconfig"<CR>
  nnoremap <silent> <leader>fegsi :execute ":e " . g:pub_repos_path . "/dotfiles/config/git/.gitignore_global"<CR>
  nnoremap <silent> <leader>fegc  :execute ":e " . "~/.gitconfig"<CR>
  nnoremap <silent> <leader>fega  :execute ":e " . g:pub_repos_path . "/dotfiles/config/git/.gitattributes_global"<CR>
  nnoremap <silent> <leader>fegt  :execute ":e " . g:pub_repos_path . "/dotfiles/config/git/templates"<CR>
  nnoremap <silent> <leader>fevsi :execute ":e " . g:pub_repos_path . "/dotfiles/config/nvim/init.vim"<CR>
  nnoremap <silent> <leader>fevi  :execute ":e " . "~/.config/nvim/init.vim"<CR>
  nnoremap <silent> <leader>fevg  :execute ":e " . "~/.config/nvim/ginit.vim"<CR>
  nnoremap <silent> <leader>fevp  :execute ":e " . g:dein_toml<CR>
  nnoremap <silent> <leader>fevt  :execute ":e " . g:pub_repos_path . "/mysnip"<CR>
  nnoremap <silent> <leader>fezsr :execute ":e " . g:dotfiles_config_path . "/.zshrc"<CR>
  nnoremap <silent> <leader>fezr  :execute ":e " . "~/.zshrc"<CR>
  nnoremap <silent> <leader>fezro :execute ":e " . s:zsh_config_path . "/.zshrc_osx"<CR>
  nnoremap <silent> <leader>fezru :execute ":e " . s:zsh_config_path . "/.zshrc_unix"<CR>
  nnoremap <silent> <leader>fezrw :execute ":e " . s:zsh_config_path . "/.zshrc_wsl"<CR>
  nnoremap <silent> <leader>fezse :execute ":e " . g:dotfiles_config_path . "/.zshenv"<CR>
  nnoremap <silent> <leader>feze  :execute ":e " . "~/.zshenv"<CR>
  nnoremap <silent> <leader>fezeo :execute ":e " . s:zsh_config_path . "/.zshenv_osx"<CR>
  nnoremap <silent> <leader>fezeu :execute ":e " . s:zsh_config_path . "/.zshenv_unix"<CR>
  nnoremap <silent> <leader>fezew :execute ":e " . s:zsh_config_path . "/.zshenv_wsl"<CR>
  nnoremap <silent> <leader>fezp  :execute ":e " . s:zsh_config_path . "/.zshrc.plugin"<CR>
  nnoremap <silent> <leader>fezu  :execute ":e " . s:zsh_config_path . "/zsh-utils"<CR>
  nnoremap <silent> <leader>fetc  :execute ":e " . g:pub_repos_path . "/dotfiles/config/.tmux.conf"<CR>
  nnoremap <silent> <leader>feto  :execute ":e " . g:pub_repos_path . "/dotfiles/config/tmux/.tmux.conf_osx"<CR>
  nnoremap <silent> <leader>fetu  :execute ":e " . g:pub_repos_path . "/dotfiles/config/tmux/.tmux.conf_unix"<CR>
  nnoremap <silent> <leader>fetw  :execute ":e " . g:pub_repos_path . "/dotfiles/config/tmux/.tmux.conf_wsl"<CR>
  nnoremap <silent> <leader>fepc  :execute ":e " . g:pub_repos_path . "/dotfiles/config/.config/powerline/config.json"<CR>
  nnoremap <silent> <leader>fepl  :execute ":e " . g:pub_repos_path . "/dotfiles/config/.config/powerline/colors.json"<CR>
  nnoremap <silent> <leader>fept  :execute ":e " . g:pub_repos_path . "/dotfiles/config/.config/powerline/themes"<CR>
  nnoremap <silent> <leader>feptt :execute ":e " . g:pub_repos_path . "/dotfiles/config/.config/powerline/themes/tmux"<CR>
'''
depends = ['vim-clap', 'denite-converter-prioritize-basename']

[[plugins]]
repo = 'hrsh7th/denite-converter-prioritize-basename'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
depends = 'denite.nvim'

[[plugins]]
repo = 'bundai223/vim-denite-shellcmd'
# repo = '~/repos/github.com/bundai223/vim-denite-shellcmd'
depends = 'denite.nvim'

[[plugins]]
repo = 'bundai223/vim-denite-cgrep'
# repo = '~/repos/github.com/bundai223/vim-denite-cgrep'
depends = 'denite.nvim'

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i = 1
depends = 'neosnippet-snippets'
hook_post_source = '''
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets' behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  "smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  " \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  " path to mysnippet
  let s:mysnip_path='~/repos/github.com/bundai223/mysnip'
  let g:neosnippet#snippets_directory=s:mysnip_path

  " Enable snipMate compatibility feature.
  " let g:neosnippet#enable_snipmate_compatibility = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  if !exists('g:context_filetype#filetypes')
    let g:context_filetype#filetypes = {}
  endif

  " changelogmemoもmarkdownと同じように書きたいので設定してみる
  let g:context_filetype#filetypes.changelog = [
       \   {
       \    'start' : '^\s*```\s*\(\h\w*\)',
       \    'end' : '^\s*```$', 'filetype' : '\1',
       \   },
       \   {
       \    'start' : '^\s*- ```\s*\(\h\w*\)',
       \    'end' : '^\s*- ```$', 'filetype' : '\1',
       \   },
       \ ]
'''

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'

[[plugins]]
repo = 'vim-scripts/dbext.vim'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
hook_add = '''
  let g:precious_enable_switchers = get(g:, 'precious_enable_switchers', {})
  let g:precious_enable_switchers = {
        \   '*': {
        \     'setfiletype': 1
        \   },
        \   'vue': { 'setfiletype': 0 },
        \   'changelog': { 'setfiletype': 0 }
        \ }
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_cmd = ['OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch']
hook_add = '''
  let g:netrw_nogx = 1 " disable netrw's gx mapping.
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''


[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  nmap [myleader]c <Plug>(caw:hatpos:toggle)
  vmap [myleader]c <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  " let g:submode_timeout = 0
  " TELLME: The above setting do not work.
  " Use the following instead of above.
  let g:submode_timeoutlen = 1000000

  let g:submode_keep_leaving_key=1

  " http://d.hatena.ne.jp/thinca/20130131/1359567419
  " https://gist.github.com/thinca/1518874
  " Window size mode.
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>+')
  call submode#map('winsize', 'n', '', '-', '<C-w>-')

  " Tab move mode.
  call submode#enter_with('tabmove', 'n', '', 'gt', 'gt')
  call submode#enter_with('tabmove', 'n', '', 'gT', 'gT')
  call submode#map('tabmove', 'n', '', 't', 'gt')
  call submode#map('tabmove', 'n', '', 'T', 'gT')
'''

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'

# [[plugins]]
# repo = 'kana/vim-textobj-function'
# depends = 'vim-textobj-user'
#
[[plugins]]
repo = 'kana/vim-textobj-lastpat'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  nmap <leader>/cr <Plug>(clever-f-reset)
  let g:clever_f_use_migemo = 1
'''

[[plugins]]
repo = 'rhysd/migemo-search.vim'
hook_add = '''
  if executable('cmigemo')
    cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>"
  endif
'''

[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
hook_add = '''
  vmap ab <Plug>(textobj-multiblock-a)
  vmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multitextobj'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  " バッファが空なら閉じる
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
        \   'runner' : 'vimproc',
        \   'runner/vimproc/updatetime' : 40,
        \   'outputter' : 'error',
        \   'outputter/error/success' : 'buffer',
        \   'outputter/error/error'  : 'quickfix',
        \   'outputter/buffer/split' : ':botright 8sp',
        \   'outputter/buffer/close_on_empty' : 1,
        \}
  let g:quickrun_config['rust'] = {
        \   'type' : 'rust/cargo',
        \}

  let g:quickrun_config['ruby.rspec'] = {
        \  'command' : 'rspec',
        \  'exec'    : 'bundle exec %c %o %s',
        \  'cmdopt'  : '-c -fd --tty',
        \  'filetype': 'rspec-result'
        \}
  let g:quickrun_config['ruby.rspec_line'] = {
        \  'command': 'rspec',
        \  'exec': 'bundle exec %c %s:%{line(".")} %o',
        \  'cmdopt': '-c -fd --tty',
        \  'filetype': 'rspec-result'
        \}

  augroup MyAutoCmd
    autocmd FileType ruby.rspec nnoremap <silent><buffer> <leader>rl :<C-u>QuickRun ruby.rspec_line<CR>
  augroup END

'''

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_faster = 1
  let g:indentLine_color_term = 239
  let g:indentLine_color_gui = '#616161'
  let g:indentLine_concealcursor=""
  "let g:indentLine_char = '┊'
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let s:colorscheme = 'iceberg'
  if !empty($COLORSCHEME)
    let s:colorscheme = $COLORSCHEME
  endif

  let s:readonly = ''
  let s:branch = ' ' "''
  let s:line_number = ''

  let g:lightline = get(g:, 'lightline', {})

  let g:lightline.colorscheme        = s:colorscheme
  let g:lightline.separator = {
        \   'left': "", 'right': ""
        \ }
  let g:lightline.subseparator = {
        \   'left': "", 'right': ""
        \ }
  let g:lightline.mode_map = {
		    \ 'n' : 'N',
		    \ 'i' : 'I',
		    \ 'R' : 'R',
		    \ 'v' : 'V',
		    \ 'V' : 'V-L',
		    \ "\<C-v>": 'V-B',
		    \ 'c' : 'C',
		    \ 's' : 'S',
		    \ 'S' : 'S-L',
		    \ "\<C-s>": 'S-B',
		    \ 't': 'T',
		    \ }
  let g:lightline.active = {
        \   'left': [
        \     [ 'mode', 'plugin', 'paste' ],
        \     [ 'fugitive' ],
        \     [ 'prjname', 'cwd' ]
        \   ],
        \   'right': [
        \     ['lineinfo', 'syntax_check'],
        \     ['percent'],
        \     ['charcode', 'fileformat', 'fileencoding', 'filetype']
        \   ]
        \ }
  let g:lightline.tabline = {
        \   'left': [
        \     ['tabs']
        \   ],
        \   'right': [
        \     ['sky_color_clock'],
        \   ]
        \ }
  let g:lightline.component_function = {
        \   'mode': 'MyMode',
        \   'plugin': 'MySpPlugin',
        \   'fugitive': 'MyFugitive',
        \   'gitgutter': 'MyGitgutter',
        \   'prjname': 'MyPrjname',
        \   'cwd': 'MyCwd',
        \   'charcode': 'MyCharCode',
        \   'fileformat': 'MyFileformat',
        \   'fileencoding': 'MyFileencoding',
        \   'filetype': 'MyFiletype'
        \ }
  let g:lightline.component = {
        \   'lineinfo': s:line_number . '%3l:%-2v',
        \   'sky_color_clock': "%#SkyColorClock#%{' ' . sky_color_clock#statusline() . ' '}%#SkyColorClockTemp# "
        \ }
  let g:lightline.component_raw = {
        \   'sky_color_clock': 1
        \ }
  let g:lightline.component_expand = {
        \   'syntax_check': 'qfstatusline#Update'
        \ }
  let g:lightline.component_type = {
        \   'syntax_check': 'error'
        \ }
  let g:lightline.tab_component_function = {
        \  'prefix':   'TalPrefix',
        \  'filename': 'TalFilename'
        \}
  let g:lightline.tab = {'active': ['prefix', 'filename']}
  let g:lightline.tab.inactive = g:lightline.tab.active

  " tab
  function! TalPrefix(n)
    " return lightline#tab#tabnum(a:n) . TalTabwins(a:n)
    return lightline#tab#tabnum(a:n) . ' ' . g:lightline.subseparator.left
  endfunction

  function! TalTabwins(n)
    return repeat(',', len(tabpagebuflist(a:n)))
  endfunction

  function! TalFilename(n)
    return substitute(lightline#tab#filename(a:n), '.\{40}\zs.\{-}\(\.\w\+\)\?$', '~\1', '')
  endfunction

  function! TalBufnum(n)
    let buflist = tabpagebuflist(a:n)
    let winnr = tabpagewinnr(a:n)
    return buflist[winnr - 1]
  endfunction

  " lightline
  function! MyModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! MyReadonly()
    return &readonly ? s:readonly : ''
  endfunction

  function! MyFilename()
    let fname = expand('%:t')
    return
          \ fname =~ '__Gundo' ? '' :
          \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
          \  &ft == 'unite' ? unite#get_status_string() :
          \  &ft == 'vimshell' ? vimshell#get_status_string() :
          \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
          \ ('' != MyModified() ? ' ' . MyModified() : '') .
          \ '' != fname ? fname : '[No Name]')
  endfunction

  function! MyFugitive()
    if winwidth(0) <= 142
      return ''
    endif

    try
      if expand('%:t') !~? 'Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
        let _ = fugitive#head()
        return strlen(_) ? s:branch._ : ''
      endif
    catch
    endtry
    return ''
  endfunction

  function! MyGitgutter()
    if ! exists('*GitGutterGetHunkSummary')
          \ || ! get(g:, 'gitgutter_enabled', 0)
          \ || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
          \ g:gitgutter_sign_added . ' ',
          \ g:gitgutter_sign_modified . ' ',
          \ g:gitgutter_sign_removed . ' '
          \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
  endfunction
  function! MyFileformat()
    return winwidth(0) > 142 ? &fileformat : ''
  endfunction

  function! MyFiletype()
    return winwidth(0) > 142 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! MyFileencoding()
    return winwidth(0) > 142 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! MyMode()
    " return winwidth(0) > 60 ? lightline#mode() : ''
    return lightline#mode()
  endfunction

  function! MySpPlugin()
    let fname = expand('%:t')
    return  winwidth(0) <= 142 ? '' :
          \ fname == '__Gundo__' ? 'Gundo' :
          \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
          \ &ft == 'unite' ? 'Unite' :
          \ &ft == 'vimfiler' ? 'VimFiler' :
          \ &ft == 'vimshell' ? 'VimShell' :
          \ ''
  endfunction

  " depends on vim-rooter
  function! PrjRoot()
    let s:rootdir = FindRootDirectory()
    if empty(s:rootdir)
      " let g:nishimura= system(s:exe_cmd)
      return getcwd()
    else
      return s:rootdir
    endif
  endfunction

  function! MyPrjname()
    if winwidth(0) > 70
      let s:pwd = PrjRoot()

      " $HOMEは'~'表示の方が好きなので置き換え
      let s:short_pwd = substitute(s:pwd, expand('~'), '~', '')
      let s:normalized_pwd = substitute(s:short_pwd, '\~/repos/[^/]*/', '', '')
      return s:normalized_pwd
    else
      return ''
    endif
  endfunction

  function! MyCwd()
    if winwidth(0) > 70
      let s:prjroot = PrjRoot()

      " $HOMEは'~'表示の方が好きなので置き換え
      let s:normalized_prjroot = substitute(expand('%:h'), s:prjroot, '', '')
      return s:normalized_prjroot
    else
      return ''
    endif
  endfunction

  function! MyCharCode()
    if winwidth('.') <= 142
      return ''
    endif

    " Get the output of :ascii
    redir => ascii
    silent! ascii
    redir END

    if match(ascii, 'NUL') != -1
      return 'NUL'
    endif

    " Zero pad hex values
    let nrformat = '0x%02x'

    let encoding = (&fenc == '' ? &enc : &fenc)

    if encoding == 'utf-8'
      " Zero pad with 4 zeroes in unicode files
      let nrformat = '0x%04x'
    endif

    " Get the character and the numeric value from the return value of :ascii
    " This matches the two first pieces of the return value, e.g.
    " "<F>  70" => char: 'F', nr: '70'
    let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

    " Format the numeric value
    let nr = printf(nrformat, nr)

    return "'". char ."' ". nr
  endfunction
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_linters = {
        \   'sh': ['shellcheck'],
        \   'bash': ['shellcheck'],
        \   'ruby': ['rubocop'],
        \   'js': ['eslint'],
        \   'ts': ['eslint'],
        \   'jsx': ['eslint'],
        \   'tsx': ['eslint'],
        \   'dockerfile': ['hadolint'],
        \}
  let g:ale_fixers = {
        \   'javascript': ['prettier', 'eslint']
        \ }
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '>'
  let g:ale_sign_warning = '>'

  let g:ale_lint_on_enter = 1

  " Filetype settings
  " see :ALEInfo on the filetype buffer.
  let g:ale_dockerfile_hadolint_use_docker = 'yes'
'''

[[plugins]]
repo = 'tyru/operator-camelize.vim'
hook_add = '''
  nmap <leader>s <plug>(operator-camelize-toggle)
  vmap <leader>s <plug>(operator-camelize-toggle)
'''

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'koron/codic-vim'
on_cmd = ['Codic']

[[plugins]]
repo ='tpope/vim-fugitive'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'


# rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
  let g:rustfmt_autosave = 1
'''


[[plugins]]
repo  = 'fatih/vim-go'
on_ft = 'go'


# ruby
[[plugins]]
repo  = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo  = 'tpope/vim-bundler'
on_ft = 'ruby'

[[plugins]]
repo  = 'tpope/vim-endwise'
on_ft = 'ruby'
on_i  = 1

[[plugins]]
repo  = 'yuku-t/vim-ref-ri'
on_ft = 'ruby'

[[plugins]]
repo    = 'todesking/ruby_hl_lvar.vim'
# on_ft   = 'ruby'
# hook_post_source = '''
#   silent! execute 'doautocmd FileType' &filetype
# '''

[[plugins]]
repo = 'pocke/dicts'

# javascript
[[plugins]]
repo    = 'pangloss/vim-javascript'
on_ft   = 'js'


[[plugins]]
repo    = 'mxw/vim-jsx'
on_ft   = 'js'

[[plugins]]
repo    = 'posva/vim-vue'
on_ft   = 'vue'

[[plugins]]
repo    = 'leafgarland/typescript-vim'
on_ft   = 'typescript'

[[plugins]]
repo    = 'peitalin/vim-jsx-typescript'
on_ft   = 'typescript'

[[plugins]]
repo    = 'skywind3000/asyncrun.vim'
hook_add = '''
  autocmd BufWritePost *.js AsyncRun -post=checktime ./node_modules/.bin/eslint --fix %
'''

[[plugins]]
repo    = 'mattn/emmet-vim'
on_i    = 1
hook_post_source = '''
  let g:user_emmet_leader_key='<Tab>'
  let g:user_emmet_settings = {
    \  'javascript.jsx' : {
      \      'extends' : 'jsx',
      \  },
    \}
'''


[[plugins]]
repo = 'bundai223/vim-colors-solarized'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  colorscheme iceberg
  "フォーカスしていない時の背景色(23を好きな値・色に変更)
  " let g:InactiveBackGround = 'ctermbg=23'
  let g:InactiveBackGround = 'guibg=#3e445e'

  "Neovim自体からフォーカスを外したりした際の切替設定
  "(フォーカスした時の設定はcolorschemeに合わせて変更）
  augroup ChangeBackGround
    autocmd!

    "Neovim内でフォーカスしていないペインの背景色設定
    autocmd WinEnter * execute ('hi NormalNC ' . g:InactiveBackGround)
    autocmd WinEnter * execute ('hi NontextNC ' . g:InactiveBackGround)
    autocmd WinEnter * execute ('hi SpecialkeyNC ' . g:InactiveBackGround)
    autocmd WinEnter * execute ('hi EndOfBufferNC ' . g:InactiveBackGround)

    " フォーカスした時(colorscheme準拠に切替)
    autocmd FocusGained * hi Normal guibg=#161821 " :hi Normalで取得した値
    autocmd FocusGained * hi NonText guibg=#161821 " :hi NonTextで取得した値
    autocmd FocusGained * hi SpecialKey guibg=#161821 " :hi SpecialKeyで取得した値
    autocmd FocusGained * hi EndOfBuffer guibg=#161821 " EndOfBufferの設定は恐らくclearなのでnoneを入れる
    " フォーカスを外した時（フォーカスしていない時の背景色に切替)
    autocmd FocusLost * execute('hi Normal '.g:InactiveBackGround)
    autocmd FocusLost * execute('hi NonText '.g:InactiveBackGround)
    autocmd FocusLost * execute('hi SpecialKey '.g:InactiveBackGround)
    autocmd FocusLost * execute('hi EndOfBuffer '.g:InactiveBackGround)
  augroup end
'''

[[plugins]]
repo = 'mopp/sky-color-clock.vim'
hook_add = '''
  let g:sky_color_clock#openweathermap_api_key = 'fcc2b1ff22bf1eda5821034a037383ab'
  let g:sky_color_clock#enable_emoji_icon = 1
  let g:sky_color_clock#latitude = 35
  let g:sky_color_clock#openweathermap_city_id = 1850144
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'lambdalisue/fern.vim'
# on_cmd = ['Fern']
hook_add = '''
  nnoremap <silent> <leader>f<Space> :Fern %:h -reveal=%<CR>
'''
hook_source = '''
  let g:fern#renderer = "devicons"
'''
depends = ['fern-renderer-devicons.vim', 'FixCursorHold.nvim']

[[plugins]]
repo = 'lambdalisue/fern-renderer-devicons.vim'
depends = ['vim-devicons']

[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'

[[plugins]]
repo = 'mbbill/undotree'

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = 'pug'

[[plugins]]
repo = 'airblade/vim-rooter'
hook_source = '''
  let g:rooter_manual_only = 1
  let g:rooter_cd_cmd="lcd"
  let g:rooter_silent_chdir = 1
  let g:rooter_resolve_links = 1
'''

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_source = '''
  let g:gen_tags#ctags_auto_gen = 1
  let g:gen_tags#gtags_auto_gen = 1
'''

[[plugins]]
repo = 'lighttiger2505/gtags.vim'
hook_source = '''
  nnoremap <silent> <leader>gf :Gtags -f %<CR>
  nnoremap <silent> <leader>gj :GtagsCursor<CR>
  nnoremap <silent> <leader>gd :<C-u>exe('Gtags '.expand('<cword>'))<CR>
  nnoremap <silent> <leader>gr :<C-u>exe('Gtags -r '.expand('<cword>'))<CR>
'''

[[plugins]]
repo = 'AndrewRadev/gapply.vim'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_source = '''
  map <leader>e/ <Plug>(easymotion-prefix)
'''

[[plugins]]
repo = 'kshenoy/vim-signature'

[[plugins]]
repo = 'sjl/gundo.vim'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
    inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<cr>"
  endfunction

  augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
  command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')

  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_text_edit_enabled = 1
  " let g:asyncomplete_auto_popup = 1
  " let g:asyncomplete_auto_completeopt = 0
  " let g:asyncomplete_popup_delay = 200
'''


[[plugins]]
repo = 'mattn/vim-lsp-icons'
depends = 'vim-lsp'
# Plug 'hrsh7th/vim-vsnip'
# Plug 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = 'vim-lsp'

[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-snippets'
depends = 'vim-lsp'

[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-neosnippet'
depends = 'vim-lsp'

# [[plugins]]
# repo = 'lighttiger2505/deoplete-vim-lsp'
# depends = ['deoplete.nvim', 'vim-lsp']

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled=1

  function! s:GetSynStack()
    return map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
  endfunc

  function! s:IndentLikeHackMD()
    " simply return a tab character if the cursor is not on list item line
    if index(s:GetSynStack(), 'mkdListItemLine') < 0
      return '	' " here is ^V^I
    endif

    return '' " here is ^V^T
  endfunc
  inoremap <expr> <Tab> <SID>IndentLikeHackMD()
'''


[[plugins]]
repo = 'previm/previm'
hook_add = '''
  nnoremap <silent> <C-p> :PrevimOpen<CR>
  let g:previm_enable_realtime=1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'tyru/capture.vim'
