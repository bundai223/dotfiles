
# Prefix key setting
set-option -g prefix C-s

# C-s*2でtmux内のプログラムにC-sを送る
bind-key C-s send-prefix
unbind-key C-b

# nextwindow
bind-key -r n next-window
bind-key -r p previous-window

#ウィンドウを実行コマンド名で自動リネーム
set-window-option -g automatic-rename on
set-option -g status-interval 1

# コピーモードはviバインド
set-window-option -g mode-keys vi

# Immediatly ESC
set-option -sg escape-time 0

# shell
set-option -g default-shell /usr/local/bin/zsh
set-option -g default-command /usr/local/bin/zsh

# history
set-option -g history-limit 10000

# Mouse setting （デフォルトはONにしておいて、prefix+mでマウスモードを切替える）
# http://qiita.com/kawaz/items/7b15e18ca8e072c1dc57
bind-key m \
  if-shell "tmux show-options -g mouse | grep off" "set-option -g mouse on; set-option mouse on" "set-option -g mouse off; set-option mouse off"

set-option -g mouse on


# Synchronize Panes
unbind-key s
set-window-option -g synchronize-panes off
bind-key s set-window-option synchronize-panes
# bind-key s set-window-option synchronize-panes \; display "synchronize-panes #{?pane_synchronized,on,off}" # powerlineに表示するようにした


# Key binding
# Vi風のキーバインド改良版
# http://tegetegekibaru.blogspot.jp/2012/08/tmux-vi.html

# コピーモード
# コピーモード突入 デフォルトでは bind-key [ copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-keyなどはos_localのスクリプトで設定

# ===== logging =====
#
# C-b C-p Start logging.
bind-key C-p pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "' \; display-message "Logging start."
# C-b C-o Stop logging
bind-key C-o pipe-pane \; display-message "Logging end."
# C-b v Open new window. Logging always. (-n is set window name.)
bind-key v new-window -n 'logging...' \; pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "'

# ペインの移動Vi風
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
# ペインリサイズ関連Vi風
bind-key -r H resize-pane -L 5
bind-key -r L resize-pane -R 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5


# Split pane
unbind-key %
unbind-key '"'

bind-key | split-window -h
bind-key _ split-window -v
#bind-key C-h select-layout even-horizontal
#bind-key C-v select-layout even-vertical

# Move last pane or window.
bind-key C-s run "tmux last-pane || tmux last-window || tmux new-window"

# Reload .conf
unbind-key r
bind-key r source-file ~/.tmux.conf \; display ".tmux.conf Reloaded!"

#unbind-key D
#bind-key D detach
bind-key C-x confirm-before 'kill-pane'
bind-key C-k confirm-before 'kill-window'
bind-key C-q confirm-before 'kill-session'


if-shell "uname | grep -q Darwin" "source-file ~/repos/github.com/bundai223/dotfiles/config/tmux/.tmux.conf_osx" "source-file ~/repos/github.com/bundai223/dotfiles/config/tmux/.tmux.conf_unix"
if-shell "uname -a | grep -iq Microsoft" "source-file ~/repos/github.com/bundai223/dotfiles/config/tmux/.tmux.conf_wsl" ""


#追加する
# set -g @tpm_plugins '         \
#   tmux-plugins/tpm            \
# '
#   tmux-plugins/tmux-resurrect \
#   tmux-plugins/tmux-continuum \
#
# set -g @resurrect-strategy-vim 'session' # for vim
# set -g @resurrect-strategy-nvim 'session' # for neovim
# set -g @resurrect-processes 'irb pry "~rails server" "~rails console"'
#
# if-shell "test -f ~/repos/github.com/tmux-plugins/tpm/tpm" "run-shell '~/repos/github.com/tmux-plugins/tpm/tpm'"

# # for hyperterm
# set-window-option -g allow-rename on
# set-option -g set-titles on
# set-option -g set-titles-string "#T #{session_alerts}"

# Looking setting.
### ref) http://qiita.com/succi0303/items/cb396704493476373edf
# 256色端末を有効に
set-option -g default-terminal "screen-256color"

# load powerline theme
# ex) find to conf
# pip show -f powerline-status | grep Location
if-shell "test -f ~/.local/lib/python3.8/site-packages/powerline/bindings/tmux/powerline.conf" "source-file ~/.local/lib/python3.8/site-packages/powerline/bindings/tmux/powerline.conf" ""

# window title syncmode pane info
set-window-option -g automatic-rename-format "#{?pane_synchronized, ,}#{pane_index}/#{window_panes}#{command}"

## ステータスバーを上部に表示する
set-option -g status-position top
set-window-option -g pane-border-status top

# set-option easy findable active pane.
set-option -g pane-border-format "#[fg=white]#{pane_title}#[default]"
set-option -g pane-active-border-style fg=white,bg=black
set-option -g pane-border-style fg=black,bg=black
# アクティブなウィンドウを目立たせる
set-window-option -g window-status-current-style fg=white,bg=red,bright

# set-option -g pane-active-border-style fg=brightgreen,bg=brightgreen
# set-option -g pane-border-format "#{?pane_active,#[reverse],}#{pane_index}#[default] \"#{pane_title}\"" # default

## ヴィジュアルノーティフィケーションを有効にする
set-window-option -g monitor-activity off
set-option -g visual-activity off
# 左右のステータスバーの長さを決定する
# set-option -g status-left-length 60
# set-option -g status-right-length 90

run-shell "powerline-daemon -q"

