#compdef httpie
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for httpie
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Daiji Nishimura
#
# ------------------------------------------------------------------------------


_httpie ()
{
    local curcontext="$curcontext" state line ret=1

    _arguments -C \
### usage: http [--json] [--form] [--pretty {all,colors,format,none}]
###             [--style STYLE] [--print WHAT] [--verbose] [--headers] [--body]
###             [--stream] [--output FILE] [--download] [--continue]
###             [--session SESSION_NAME_OR_PATH | --session-read-only SESSION_NAME_OR_PATH]
###             [--auth USER[:PASS]] [--auth-type {basic,digest}]
###             [--proxy PROTOCOL:PROXY_URL] [--follow] [--verify VERIFY]
###             [--timeout SECONDS] [--check-status] [--ignore-stdin] [--help]
###             [--version] [--traceback] [--debug]
###             [METHOD] URL [REQUEST_ITEM [REQUEST_ITEM ...]]
### 
### HTTPie - a CLI, cURL-like tool for humans. <http://httpie.org>
### 
### Positional arguments:
###   
###   These arguments come after any flags and in the order they are listed here.
###   Only URL is required.
###   
### 
###   METHOD
###       The HTTP method to be used for the request (GET, POST, PUT, DELETE, ...).
###       
###       This argument can be omitted in which case HTTPie will use POST if there
###       is some data to be sent, otherwise GET:
###       
###           $ http example.org               # => GET
###           $ http example.org hello=world   # => POST
###       
###   URL
###       The scheme defaults to 'http://' if the URL does not include one.
###       
###       You can also use a shorthand for localhost
###       
###           $ http :3000                    # => http://localhost:3000
###           $ http :/foo                    # => http://localhost/foo
###       
###   REQUEST_ITEM
###       Optional key-value pairs to be included in the request. The separator used
###       determines the type:
###       
###       ':' HTTP headers:
###       
###           Referer:http://httpie.org  Cookie:foo=bar  User-Agent:bacon/1.0
###       
###       '==' URL parameters to be appended to the request URI:
###       
###           search==httpie
###       
###       '=' Data fields to be serialized into a JSON object (with --json, -j)
###           or form data (with --form, -f):
###       
###           name=HTTPie  language=Python  description='CLI HTTP client'
###       
###       ':=' Non-string JSON data fields (only with --json, -j):
###       
###           awesome:=true  amount:=42  colors:='["red", "green", "blue"]'
###       
###       '@' Form file fields (only with --form, -f):
###       
###           cs@~/Documents/CV.pdf
###       
###       '=@' A data field like '=', but takes a file path and embeds its content:
###       
###            essay=@Documents/essay.txt
###       
###       ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:
###       
###           package:=@./package.json
###       
###       You can use a backslash to escape a colliding separator in the field name:
###       
###           field-name-with\:colon=value
###       
### 
### Predefined content types:
###   --json, -j
###       (default) Data items from the command line are serialized as a JSON object.
###       The Content-Type and Accept headers are set to application/json
###       (if not specified).
###       
###   --form, -f
###       Data items from the command line are serialized as form fields.
###       
###       The Content-Type is set to application/x-www-form-urlencoded (if not
###       specified). The presence of any file fields results in a
###       multipart/form-data request.
###       
### 
### Output processing:
###   --pretty {all,colors,format,none}
###       Controls output processing. The value can be "none" to not prettify
###       the output (default for redirected output), "all" to apply both colors
###       and formatting (default for terminal output), "colors", or "format".
###       
###   --style STYLE, -s STYLE
###       Output coloring style (default is "solarized"). One of:
###       
###       autumn borland bw colorful default emacs friendly fruity
###       igor manni monokai murphy native paraiso-dark paraiso-light
###       pastie perldoc rrt solarized tango trac vim vs xcode
###       
###           For this option to work properly, please make sure that the $TERM
###           environment variable is set to "xterm-256color" or similar
###           (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).
###       
### 
### Output options:
###   --print WHAT, -p WHAT
###       String specifying what the output should contain:
###       
###           'H' request headers
###           'B' request body
###           'h' response headers
###           'b' response body
###       
###       The default behaviour is 'hb' (i.e., the response headers and body
###       is printed), if standard output is not redirected. If the output is piped
###       to another program or to a file, then only the response body is printed
###       by default.
###       
###   --verbose, -v
###       Print the whole request as well as the response. Shortcut for --print=HBbh.
###       
###   --headers, -h
###       Print only the response headers. Shortcut for --print=h.
###       
###   --body, -b
###       Print only the response body. Shortcut for --print=b.
###       
###   --stream, -S
###       Always stream the output by line, i.e., behave like `tail -f'.
###       
###       Without --stream and with --pretty (either set or implied),
###       HTTPie fetches the whole response before it outputs the processed data.
###       
###       Set this option when you want to continuously display a prettified
###       long-lived response, such as one from the Twitter streaming API.
###       
###       It is useful also without --pretty: It ensures that the output is flushed
###       more often and in smaller chunks.
###       
###   --output FILE, -o FILE
###       Save output to FILE. If --download is set, then only the response body is
###       saved to the file. Other parts of the HTTP exchange are printed to stderr.
###       
###   --download, -d
###       Do not print the response body to stdout. Rather, download it and store it
###       in a file. The filename is guessed unless specified with --output
###       [filename]. This action is similar to the default behaviour of wget.
###       
###   --continue, -c
###       Resume an interrupted download. Note that the --output option needs to be
###       specified as well.
###       
### 
### Sessions:
###   --session SESSION_NAME_OR_PATH
###       Create, or reuse and update a session. Within a session, custom headers,
###       auth credential, as well as any cookies sent by the server persist between
###       requests.
###       
###       Session files are stored in:
###       
###           /Users/nishimuradaiji/.httpie/sessions/<HOST>/<SESSION_NAME>.json.
###       
###   --session-read-only SESSION_NAME_OR_PATH
###       Create or read a session without updating it form the request/response
###       exchange.
###       
### 
### Authentication:
###   --auth USER[:PASS], -a USER[:PASS]
###       If only the username is provided (-a username), HTTPie will prompt
###       for the password.
###       
###   --auth-type {basic,digest}
###       The authentication mechanism to be used. Defaults to "basic".
###       
###       "basic": Basic HTTP auth
###       "digest": Digest HTTP auth
###       
### 
### Network:
###   --proxy PROTOCOL:PROXY_URL
###       String mapping protocol to the URL of the proxy
###       (e.g. http:http://foo.bar:3128). You can specify multiple proxies with
###       different protocols.
###       
###   --follow
###       Set this flag if full redirects are allowed (e.g. re-POST-ing of data at
###       new Location).
###       
###   --verify VERIFY
###       Set to "no" to skip checking the host's SSL certificate. You can also pass
###       the  path to a CA_BUNDLE file for private certs. You can also set the
###       REQUESTS_CA_BUNDLE  environment variable. Defaults to "yes".
###       
###   --timeout SECONDS
###       The connection timeout of the request in seconds. The default value is
###       30 seconds.
###       
###   --check-status
###       By default, HTTPie exits with 0 when no network or other fatal errors
###       occur. This flag instructs HTTPie to also check the HTTP status code and
###       exit with an error if the status indicates one.
###       
###       When the server replies with a 4xx (Client Error) or 5xx (Server Error)
###       status code, HTTPie exits with 4 or 5 respectively. If the response is a
###       3xx (Redirect) and --follow hasn't been set, then the exit status is 3.
###       Also an error message is written to stderr if stdout is redirected.
###       
### 
### Troubleshooting:
###   --ignore-stdin
###       Do not attempt to read stdin.
###       
###   --help
###       Show this help message and exit.
###       
###   --version
###       Show version and exit.
###       
###   --traceback
###       Prints exception traceback should one occur.
###       
###   --debug
###       Prints exception traceback should one occur, and also other information
###       that is useful for debugging HTTPie itself and for reporting bugs.
###       
### 
### For every --OPTION there is also a --no-OPTION that reverts OPTION
### to its default value.
### 
### Suggestions and bug reports are greatly appreciated:
### 
###     https://github.com/jkbr/httpie/issues
        && ret=0

    return ret
}

_httpie "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
