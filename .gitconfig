[init]
	templatedir = ~/.config/git/templates

[user "ssh://git@github.com/bundai223/"]
	name = bundai223
	email = bundai223@gmail.com
[user "https://github.com/bundai223/"]
	name = bundai223
	email = bundai223@gmail.com
[user "http://github.com/bundai223/"]
	name = bundai223
	email = bundai223@gmail.com

[core]
	attributesfile = ~/.config/git/.gitattributes_global
	excludesfile = ~/.config/git/.gitignore_global
	quotepath = false
	precomposeunicode = true

[color]
	status = auto
	diff = auto
	branch = auto
	interactive = auto
	grep = auto
	ui = auto

[ghq]
	root = ~/repos
	root = ~/go
	root = ~/sample

[include]
  path = ~/.gitconfig_local

[alias]
	ps = push					# ステータスを短く。ブランチ名付き
	pl = pull					# ステータスを短く。ブランチ名付き
	st = status --short --branch					# ステータスを短く。ブランチ名付き
	sh = show
	ft = fetch
	ad = add
	chk = checkout
	cm = commit
	df = diff
	lg = log
	lg-all = log --branches
	lgg= log --pretty=format:\"%C(red)%h%Creset %C(cyan)<%an>%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset\" --abbrev-commit --date=relative --graph
	lgg-all= log --pretty=format:\"%C(red)%h%Creset %C(cyan)<%an>%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset\" --abbrev-commit --date=relative --graph --branches
	lgv= log --pretty=format:\"%C(red)%h%Creset %C(cyan)<%an>%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset\" --abbrev-commit --date=relative
	tg = tag
	br = branch
	rb = rebase
	mg = merge
	mgt= mergetool
	stpu= stash
	stpo= stash pop

	create-trackingbranch=!git checkout -t $(git branch -r | peco)
	change-branch=!git checkout $(git branch | peco)
	chbr=!git checkout $(git branch | peco)
	change-tag=!git checkout $(git tag | peco)
	chtg=!git checkout $(git tag | peco)


# ref) http://yuroyoro.hatenablog.com/entry/20101008/1286531851
# ref) http://qiita.com/yuya_presto/items/ef199e08021dea777715
	add-modified = !git add $(git status --short | peco | sed s/"^..."//)				# 変更を全てadd
	commit-modified-all = commit -a							# 変更を全てadd
	commit-fix = commit -a --amend							# 直前のコミットを修正
	cmm = commit -a
	cmf = commit -a --amend

	# branch
	bra = branch -a	# 全てのbranch
	brr = branch -a	# 全てのbranch
	branch-all = branch -a	# 全てのbranch
	branch-remote = branch -a	# 全てのbranch

	# log関連
	wc = whatchanged         # logに変更されたファイルも一緒に出す
	ls = log --stat          # logに変更されたファイルも一緒に出す
	lp = log -p              # diffも一緒に出す
	la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
	lr = log origin          # originのlog
	oneline = log --pretty=oneline
	ranking = shortlog -s -n --no-merges
	# logをguiっぽくtree表示
	log-graph = log --graph --decorate --oneline
	glog = log --pretty=format:\"%C(red)%h%Creset %C(cyan)<%an>%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset\" --abbrev-commit --graph
	vlog = log --pretty=format:\"%C(red)%h%Creset %C(cyan)<%an>%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset\" --abbrev-commit --date=relative
	# diff関連
	diff-staged = diff --staged         # 同上(1.6.1移行)
	dfs = diff --staged         # 同上(1.6.1移行)
	dw = diff --color-words    # 単語単位でいろつけてdiff
	d1 = diff HEAD~            # HEADから1つ前とdiff
	d2 = diff HEAD~~           # HEADから2つ前とdiff
	d3 = diff HEAD~~~          # HEADから3つ前とdiff
	d4 = diff HEAD~~~~         # HEADから4つ前とdiff
	d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
	d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
	ls-changed = diff --name-only
	# mergeの際にconflictが起きたファイルを編集
	edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
	# mergeの際にconflictが起きたファイルをadd
	add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
	# grep関連
	gr = grep

  # リベース中コミット
	rebasing-commit = "!f='$(git rev-parse --git-dir)/rebase-apply/patch'; if [ -f '$f' ]; then git show $(head -n1 '$f'); else echo 'Heh?'; fi"

[push]
	default = simple

[pull]
	ff = only
	rebase = preserve

[merge]
	tool = mymvimdiff
	ff = false

[log]
	decorate = auto

